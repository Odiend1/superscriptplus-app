<resources>
    <string name="app_name">Superscript+</string>
    <string name="title_home">Home</string>
    <string name="title_dashboard">Dashboard</string>
    <string name="title_notifications">Notifications</string>
    <string name="starting_code">(prn \"Hello world!\")</string>
    <string name="run">Run</string>
    <string name="enter_code_here">Enter code here</string>
    <string name="title_documentation">Documentation</string>
    <string name="title_projects">Projects</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="your_path_to_superscript_mastery">Your Path to Superscript+ Mastery</string>
    <string name="projects">Projects</string>
    <string name="exit">Exit</string>
    <string name="save">save</string>
    <string name="project_list">Project List</string>
    <string name="x">X</string>
    <string name="next">Next</string>
    <string name="back">Back</string>
    <string name="new_project">New Project</string>
    <string name="l1_p1_body1">
        Welcome to Superscript+!
        \n\n
        Superscript+ is an app designed to teach fundamental coding concepts using a custom programming language, also called Superscript+. Superscript+ is a dialect (or a modified version of) the Superscript programming language and was created for this app to teach aspiring coders.
    </string>
    <string name="l1_p2_body1">
        The Superscript+ language uses a syntax, or rules that define how code should be written, called parenthesized prefix notation. In parenthesized prefix notation, you enclose a function and its arguments in parentheses. A function is like a command you give, and its arguments are information a function needs to run.
        \n\n
        For example, the code segment below prints "Hello world!" The first word after the parentheses, "prn", is a function that prints its argument, and in this case, the argument is "Hello world!"
        \n\n
    </string>
    <string name="l2_p1_body1">
        In this lesson, we will learn about Superscript+\'s 3 basic data types.
        \n\n
        In Superscript+, there are 3 basic data types: strings, numbers, and booleans. A string is a segment of text that contains characters (the letters, numbers, and symbols in text). For example, the text you are reading right now is stored as a string.
        \n\n
        A number is a numerical value. They can include the numbers themselves, decimals, and if they\'re negative, a negative sign.

        Booleans are values that are either true or false. They are used in logical comparisons. For example, if you asked if "1" and "1" were the same value, that would be true.
    </string>
    <string name="l2_p2_body1">
        Some functions take those data types as arguments. The "prn" function, also known as the "print" function, can take any of those data types and print their value.
        \n\n
        This code segment below prints the string "Hello world!" In Superscript+, strings must be enclosed in quotations to signify that they are strings.
    </string>
    <string name="l2_p2_body2">
        Numbers do not need to be enclosed in quotations. In Superscript+, spaces separate functions from arguments and arguments from other arguments. Numbers don\'t have spaces in the middle of them, so they do not need quotes, but strings can have spaces, so they must be enclosed in quotation marks. The code segment below shows a number being printed.
    </string>
    <string name="l2_p2_body3">
        Now, why don\'t you head to the code editor and try the "prn" function for yourself? To go to the code editor, go to the "Projects" screen and select "New Project".
    </string>
    <string name="l3_p1_body1">
        In this lesson, we will perform arithmetic on number values.
        \n\n
        In Superscript+, you can perform arithmetic through using 4 operations: addition, subtraction, multiplication, and division. To add two numbers, you can use the "+" function. This takes an unlimited number of arguments and returns their sum. The function below returns 3.
    </string>
    <string name="l3_p1_body2">
        To subtract numbers, use the "-" function. This also takes as many number as you wish, but the first number is the minuend, the number you are subtracting from, and the other numbers are subtrahend, what you are subtracting the minuend by. The function below returns 1.
    </string>
    <string name="l3_p1_body3">
        Multiplying numbers uses the "*" function and returns their product. The function below returns 12.
    </string>
    <string name="l3_p1_body4">
        To divide numbers, use the "/" function. The first number is th dividend, the number that you are dividing, and the numbers that follow are divisors, numbers that you divide by. The "/" function also throws an error if you attempt to divide by zero, as anything divided by zero is undefined. The function below returns 0.5, or one half.
    </string>
    <string name="l3_p2_body1">
        These arithmetic functions don\'t print their value automatically. Instead, they return their values. Returning a value is when a program produces output that can be used by other parts of a program. In Superscript+, functions can receive those values through nested functions. A nested function is a function that is given as an argument to another function. The code segment below shows a nested function, "(+ 4 1)".
    </string>
    <string name="l3_p2_body2">
        The "prn" function will receive the value from the nested function "(+ 4 1)" and will print the value that was returned to it, 5. Code segments where functions and their arguments can represent hierarchical structures of information are called S-expressions. In fact, all Superscript+ code written in parenthesized prefix notation is an S-expression. These S-expressions allow code to be organized and create a visual representation of the flow of actions.
    </string>
    <string name="l4_p1_body1">
        In this lesson, we will learn how to define and call the value of variables in Superscript+.
        \n\n
        When coding, we need ways to store information that can be manipulated later. We can use variables to store information. Variables are like containers. You can store information inside them and use that information later. Variables are identified using symbols. In coding, symbols are series of characters that are used to identify different variables. Like one might give a name to a pet and call it by that name, you can name a variable with a symbol, and whenever that symbol is typed as an argument, its value will be called and used there.
        \n\n
        You can define a variable with the “=” function. Declaring a variable basically tells a program that the given symbol is a variable name, so the program won’t flag it as invalid. When declaring a variable, you can also give it a value. The code segment below defines the variable “magic_number” and gives it the value “42”.
    </string>
    <string name="l4_p2_body1">
        To call a variable, you can simply type out its name. When naming variables, make sure the symbol clearly expresses what the variable is for. The following code prints magic_number, our previous variable.
    </string>
    <string name="l4_p2_body2">
        You can also perform other functions on variables to change their value in that instance. However, if you call it again later, it’ll still have its original value. For example, the first code segment below prints 45, but the next one prints magic_number’s original value of 42.
    </string>
    <string name="l4_p2_body3">
        You can also change the value of variable with the “=” function. From then on, the variable’s value will be different. This code will set magic_number to 43 and print 43.
    </string>
    <string name="l4_p2_body4">
        Now that you can define and call variables, why don’t you try them out in the code editor?
    </string>
    <string name="l5_p1_body1">
        In this lesson, we will explore the uses of user input in programming.
        \n\n
        User input allows a program to receive information while it is running, and it can use that information to adjust its behaviors and its output. In Superscript+, you can use the “read” function to receive text input from the user. The “read” function can take one argument, its prompt. The prompt will be printed when the user is asked for input.  A prompt is not required, though. You can also use the read function without any arguments. Below is an example that sets variable “input” to what the user types in through the ”read” function before printing the “input” variable.
    </string>
    <string name="l5_p1_body2">
        The next code segment below greets the user by asking for their name through the “read” function and saying hello to them by name. The “pr” function prints things like the “prn” function, but the “prn” function starts a new line after printing while the “pr” function does not start a new line. So, the output will be “Hello, (name)!”, with the user-inputted “name” variable replacing (name).
    </string>
    <string name="l5_p1_body3">
        Unfortunately, if we wanted to print something before asking for input, the text might go by so fast that the user will not be able to see it. To fix this issue, we can use the “sleep” function. The “sleep” function waits for a specified number of milliseconds before continuing to the next part of the code. Using this, you can give a delay between output text and a prompt for input. One second is 1000 milliseconds, so the code below waits for 3 seconds between welcoming the user and asking for their name.
    </string>
    <string name="l5_p2_body1">
        You can also receive numbers through user input and perform operations on them. For example, the code segment below gets two numbers from the user and adds them before printing the value.
    </string>
    <string name="l5_p2_body2">
        This code segment below gets rolls a dice with the number of faces the user specifies. The “rand” function gets a random integer with the first argument as the minimum and the second argument as the maximum (both are inclusive). The pause before the result is given was added for effect.
    </string>
    <string name="l5_p2_body3">
        Now that you know how to obtain user input, why don’t you give it a try in the code editor?
    </string>
    <string name="l6_p1_body1">
        In this lesson, we will use if statements to test conditions.
        \n\n
        In programming, if statements are code that tests if something is true before running a piece of code. They test conditions, statements that evaluate to be either true or false. You can make conditions with a few functions, and one of them is the “is” function. The “is” function takes two arguments and checks if their values are equal. Then, depending on the result, it returns either true or false. The code segment below compares the values 1 and 1.
    </string>
    <string name="l6_p1_body2">
        This would return true. However, if the values were different, like 1 and “Hi!”, it would return false. This code segment below checks if 1 is “Hi!”, and since 1 is not “Hi!”, it returns false.
    </string>
    <string name="l6_p1_body3">
        You can use these conditions in an if statement. In Superscript+, you can create if statements with the “if” function. This function takes a condition as its first argument, and if it is true, it will run the code in its second argument. If it is false, an else statement will occur, and the code in the third argument will be run instead. This code segment below sets the variable “number” to 3 and checks if it is equal to 3. If it is, it will print “Equal!”. If it is not, it will print “Not equal.”.
    </string>
    <string name="l6_p1_body4">
        If you don’t want an else statement, you can simply put nothing as that argument. Now, this function will only print if the condition is true.
    </string>
    <string name="l6_p2_body1">
        You can also compare two values in conditions. The “&gt;” function, or greater than function, and the “&lt;” function, or less than function. With these, you can check if the first given argument is greater than or less than the other argument. These functions can only compare numbers, as text cannot be compared in this way. The following code segment checks if the variable “num1” is larger than “num2”. In this case, this is true, so “The first number is bigger!” will be printed.
    </string>
    <string name="l6_p2_body2">
        This code segment below checks if the variable num1 is smaller than num2. Since it is not smaller, the condition will return false, so “The second number is smaller!” will be printed.
    </string>
    <string name="l6_p2_body3">
        However, if the numbers were switched around in the condition, true will be returned, and “The first number is smaller!” will be printed.
    </string>
    <string name="l6_p3_body1">
        To run more than one function as a result of an if statement, you can use the “do” function. The “do” function takes multiple functions as its arguments and runs those functions. The code below checks if the variable “score” is greater than 100, and if it is, “You win!” and the score is printed.
    </string>
    <string name="l6_p3_body2">
        That code was also indented to make it more readable. The contents of the if and the do were pushed further so they would stand out from the rest of the code. Of course, indentation isn’t necessary, but it’s a good practice when writing code.
        \n\n
        To create a condition that tests for something if one condition is false, you can use an else-if statement. In the previous code, an else-if statement checks if the score is below 0, and if it is, “Game over!” is printed.
    </string>
    <string name="l6_p3_body3">
        The code above basically adds an if statement to the first if statement’s else. You can use this to test multiple conditions and do different things for each of them. Here’s another example that also incorporates an else statement.
    </string>
    <string name="l6_p3_body4">
        In the next lesson, we will learn more about comparing values and if statements as we go over do statements and logical operators.
    </string>
    <string name="l7_p1_body1">
        In this lesson, we will learn about logical operators.
        \n\n
        Logical operators are things that can take in one or more booleans (true or false values) and get another boolean result. One of these logical operators is the “not” operator. The “not” operator takes one boolean and inverts its value. If it was true before, it would become false, and if it was false before, it would become true. You can use the “not” operator through the “not” function in Superscript+. Below is an example of how the not operator would be used in code.
    </string>
    <string name="l7_p1_body2">
        Another logical operator is the “and” operator. The “and” operator can take more than one boolean. All the booleans in the and operator must be true for the and operator to return true. If one of them is false, the operator will return false. The first two examples return true while the second two return false.
    </string>
    <string name="l7_p1_body3">
        The last logical operator with a Superscript+ function is the “or” operator. The “or” operator checks if either of its values are true, and if one is, it returns true. No matter how many values are false, it only one is true, the or operator will return true. The first two examples return true while the second two return false.
    </string>
    <string name="l7_p1_body4">
        Now, why don\’t you try these logical operators in the code editor?
    </string>
    <string name="l8_p1_body1">
        In this lesson, we will learn how to manipulate strings.
        \n\n
        Strings, or text values, are a collection of characters, the individual letters, numbers, and symbols that make up text. Each character in a string has an index. An index is a number that refers to the position of some data in a list. In Superscript+, indexes start at 0, and continue from there. For example, the first character of “Hello world!”, “H”, would have an index of 0. To get the character at a certain index of a string in Superscript+, you can use the “char_at” function. Below is an example of getting the first two characters of “Hello world!”, “H” and “e”, and printing them.
    </string>
    <string name="l8_p1_body2">
        One Superscript+ function that manipulates strings is the “substr” function. This function extracts a substring from a string. A substring is a smaller segment of characters inside a string. For example, “world” could be a substring of “Hello world!”. The first argument is the string you want to get a substring of, the second argument is the index of the starting character of the substring, and the optional third argument is the index the substring should stop at (it is not included in the substring). The example below is code that prints the substring “world” from “Hello world!”. Remember, the first character has an index of 0.
    </string>
    <string name="l8_p1_body3">
        If you put an index that doesn’t exist in the string, you can get an error. However, user input can be short or can be lengthy, so when getting a substring of user input, you might need to know the length of a string. You can get it with the “length” function. Below is an example that takes user input and deletes the last letter of it. 1 was subtracted from the length to get the last index.
    </string>
    <string name="l8_p2_body1">
        You can also manipulate the case of letters in Superscript+. Using the “lower” and “upper” functions, you can make all the letters in a string lower or uppercase. You can use these functions to check if the user inputted a certain phrase, even if it was in a different case. This code uses an if statement to check if the user inputs “yes”, even if it is phrased as “YES”, “Yes”, “yES”, etc.
    </string>
    <string name="l8_p2_body2">
        Another form of string manipulation is concatenation. Concatenation is the joining and combining of two strings. You can also concatenate different strings in Superscript+ using the “concat” function. This code segment below concatenates a string with itself two or three times depending on the user input. The code takes both the number and the written-out form as user input using the or operator.
    </string>
    <string name="l8_p2_body3">
        Now, why don’t you try to implement string manipulation into your own code?
    </string>
    <string name="lesson_1_name">Lesson 1 - Intro to Superscript+</string>
    <string name="lesson_2_name"><![CDATA[Lesson 2 - Data Types & Output]]></string>
    <string name="lesson_3_name"><![CDATA[Lesson 3 - Arithmetic & Nested Functions]]></string>
    <string name="lessons">Lessons</string>
    <string name="lesson_4_name">Lesson 4 - Variables</string>
    <string name="lesson_5_name">Lesson 5 - User Input</string>
    <string name="lesson_6_name"><![CDATA[Lesson 6 - If Statements & Conditions]]></string>
    <string name="lesson_7_name">Lesson 7 - Logical Operators</string>
    <string name="lesson_8_name">Lesson 8 - String Manipulation</string>
    <string name="lesson_9_name">Lesson 9 - Loops</string>
    <string name="lesson_10_name">Lesson 10 - Infix Expressions</string>
    <string name="superscript_plus_logo">Superscript Plus Logo</string>
    <string name="delete_project">Delete Project</string>
</resources>